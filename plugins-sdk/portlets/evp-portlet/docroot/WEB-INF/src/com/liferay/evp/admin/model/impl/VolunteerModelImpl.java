/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.evp.admin.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.evp.admin.model.Volunteer;
import com.liferay.evp.admin.model.VolunteerModel;
import com.liferay.evp.admin.model.VolunteerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.User;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.service.UserLocalServiceUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Volunteer service. Represents a row in the &quot;evp_Volunteer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.evp.admin.model.VolunteerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VolunteerImpl}.
 * </p>
 *
 * @author Joan.Kim
 * @see VolunteerImpl
 * @see com.liferay.evp.admin.model.Volunteer
 * @see com.liferay.evp.admin.model.VolunteerModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class VolunteerModelImpl extends BaseModelImpl<Volunteer>
	implements VolunteerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a volunteer model instance should use the {@link com.liferay.evp.admin.model.Volunteer} interface instead.
	 */
	public static final String TABLE_NAME = "evp_Volunteer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "volunteerId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "firstName", Types.VARCHAR },
			{ "lastName", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "coordX", Types.BIGINT },
			{ "coordY", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table evp_Volunteer (volunteerId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,address VARCHAR(75) null,coordX LONG,coordY LONG)";
	public static final String TABLE_SQL_DROP = "drop table evp_Volunteer";
	public static final String ORDER_BY_JPQL = " ORDER BY volunteer.lastName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY evp_Volunteer.lastName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.evp.admin.model.Volunteer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.evp.admin.model.Volunteer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.evp.admin.model.Volunteer"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long LASTNAME_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Volunteer toModel(VolunteerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Volunteer model = new VolunteerImpl();

		model.setVolunteerId(soapModel.getVolunteerId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFirstName(soapModel.getFirstName());
		model.setLastName(soapModel.getLastName());
		model.setAddress(soapModel.getAddress());
		model.setCoordX(soapModel.getCoordX());
		model.setCoordY(soapModel.getCoordY());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Volunteer> toModels(VolunteerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Volunteer> models = new ArrayList<Volunteer>(soapModels.length);

		for (VolunteerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.evp.admin.model.Volunteer"));

	public VolunteerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _volunteerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVolunteerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _volunteerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Volunteer.class;
	}

	@Override
	public String getModelClassName() {
		return Volunteer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("volunteerId", getVolunteerId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("firstName", getFirstName());
		attributes.put("lastName", getLastName());
		attributes.put("address", getAddress());
		attributes.put("coordX", getCoordX());
		attributes.put("coordY", getCoordY());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long volunteerId = (Long)attributes.get("volunteerId");

		if (volunteerId != null) {
			setVolunteerId(volunteerId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String firstName = (String)attributes.get("firstName");

		if (firstName != null) {
			setFirstName(firstName);
		}

		String lastName = (String)attributes.get("lastName");

		if (lastName != null) {
			setLastName(lastName);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		Long coordX = (Long)attributes.get("coordX");

		if (coordX != null) {
			setCoordX(coordX);
		}

		Long coordY = (Long)attributes.get("coordY");

		if (coordY != null) {
			setCoordY(coordY);
		}
	}

	@JSON
	@Override
	public long getVolunteerId() {
		return _volunteerId;
	}

	@Override
	public void setVolunteerId(long volunteerId) {
		_volunteerId = volunteerId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return StringPool.BLANK;
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_columnBitmask = -1L;

		_lastName = lastName;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	@Override
	public long getCoordX() {
		return _coordX;
	}

	@Override
	public void setCoordX(long coordX) {
		_coordX = coordX;
	}

	@JSON
	@Override
	public long getCoordY() {
		return _coordY;
	}

	@Override
	public void setCoordY(long coordY) {
		_coordY = coordY;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Volunteer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Volunteer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Volunteer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VolunteerImpl volunteerImpl = new VolunteerImpl();

		volunteerImpl.setVolunteerId(getVolunteerId());
		volunteerImpl.setCompanyId(getCompanyId());
		volunteerImpl.setUserId(getUserId());
		volunteerImpl.setUserName(getUserName());
		volunteerImpl.setCreateDate(getCreateDate());
		volunteerImpl.setModifiedDate(getModifiedDate());
		volunteerImpl.setFirstName(getFirstName());
		volunteerImpl.setLastName(getLastName());
		volunteerImpl.setAddress(getAddress());
		volunteerImpl.setCoordX(getCoordX());
		volunteerImpl.setCoordY(getCoordY());

		volunteerImpl.resetOriginalValues();

		return volunteerImpl;
	}

	@Override
	public int compareTo(Volunteer volunteer) {
		int value = 0;

		value = getLastName().compareTo(volunteer.getLastName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Volunteer)) {
			return false;
		}

		Volunteer volunteer = (Volunteer)obj;

		long primaryKey = volunteer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		VolunteerModelImpl volunteerModelImpl = this;

		volunteerModelImpl._originalCompanyId = volunteerModelImpl._companyId;

		volunteerModelImpl._setOriginalCompanyId = false;

		volunteerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Volunteer> toCacheModel() {
		VolunteerCacheModel volunteerCacheModel = new VolunteerCacheModel();

		volunteerCacheModel.volunteerId = getVolunteerId();

		volunteerCacheModel.companyId = getCompanyId();

		volunteerCacheModel.userId = getUserId();

		volunteerCacheModel.userName = getUserName();

		String userName = volunteerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			volunteerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			volunteerCacheModel.createDate = createDate.getTime();
		}
		else {
			volunteerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			volunteerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			volunteerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		volunteerCacheModel.firstName = getFirstName();

		String firstName = volunteerCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			volunteerCacheModel.firstName = null;
		}

		volunteerCacheModel.lastName = getLastName();

		String lastName = volunteerCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			volunteerCacheModel.lastName = null;
		}

		volunteerCacheModel.address = getAddress();

		String address = volunteerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			volunteerCacheModel.address = null;
		}

		volunteerCacheModel.coordX = getCoordX();

		volunteerCacheModel.coordY = getCoordY();

		return volunteerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{volunteerId=");
		sb.append(getVolunteerId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", firstName=");
		sb.append(getFirstName());
		sb.append(", lastName=");
		sb.append(getLastName());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", coordX=");
		sb.append(getCoordX());
		sb.append(", coordY=");
		sb.append(getCoordY());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.evp.admin.model.Volunteer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>volunteerId</column-name><column-value><![CDATA[");
		sb.append(getVolunteerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>firstName</column-name><column-value><![CDATA[");
		sb.append(getFirstName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastName</column-name><column-value><![CDATA[");
		sb.append(getLastName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coordX</column-name><column-value><![CDATA[");
		sb.append(getCoordX());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coordY</column-name><column-value><![CDATA[");
		sb.append(getCoordY());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Volunteer.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Volunteer.class
		};
	private long _volunteerId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _firstName;
	private String _lastName;
	private String _address;
	private long _coordX;
	private long _coordY;
	private long _columnBitmask;
	private Volunteer _escapedModel;
}